Priority:
1. benchmark (https://github.com/jdumas/aabb_benchmark)
2. README (how to leverage coherency in cpqs, benchmark results, explain file formats)

Future Optimizations & Features:
1. add support for more geometries:
---- spheres, thickened line segments & triangles, beziers, nurbs, subdivision surfaces
2. return all primitives inside min radius for cpq query
3. traversal optimization for closest point queries & intersections:
---- quantize bounding boxes: https://www.embree.org/papers/2018-HPG-compressedleafbvh.pdf
---- implement "stackless" traversal: https://software.intel.com/content/dam/develop/external/us/en/documents/wide-bvh-traversal-with-a-short-stack-837099.pdf
---- sort nodes by direction for closest point queries (things can possibly go very
	 wrong if guess is totally off for certain geometric distributions)
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure while querying that stores pointers to nodes in the tree based on
	  positions and directions to boundary
4. GPU traversal (Enoki CUDA vs GLSL)
5. tree construction:
---- spatial split bvh
---- oriented bounding boxes + rectangular swept spheres (specify bounding volume via templates)
---- vectorize + thread
6. packet queries: lower bound distance to all points inside box (optionally, collect subtrees)
7. refit bvh
